<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2008r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:n="http://www.europeana.eu/schemas/ese/" xmlns:n2="http://www.lido-schema.org" xmlns:gml="http://www.opengis.net/gml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="fn gml n2 xlink xs xsi xsl" xmlns="http://www.europeana.eu/schemas/ese/">
	<xsl:namespace-alias stylesheet-prefix="n" result-prefix="#default"/>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/lidoWrap">
		<n:record>
			<xsl:attribute name="xsi:schemaLocation" separator=" ">
				<xsl:sequence select="'http://www.europeana.eu/schemas/ese/ http://www.europeana.eu/schemas/ese/ESE-V3.2.xsd'"/>
			</xsl:attribute>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="objectIdentificationWrap">
						<xsl:for-each select="titleWrap">
							<xsl:for-each select="titleSet">
								<xsl:for-each select="appellationValue">
									<xsl:variable name="Vvar522_exists" as="xs:boolean">
										<xsl:variable name="ExistsResult" as="xs:boolean*">
											<xsl:for-each select="@pref">
												<xsl:variable name="Vvar524_pref_string" as="xs:string" select="xs:string(.)"/>
												<xsl:if test="($Vvar524_pref_string) = ('preferred')">
													<xsl:value-of select="true()"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:value-of select="fn:exists($ExistsResult)"/>
									</xsl:variable>
									<xsl:if test="$Vvar522_exists">
										<xsl:variable name="Vvar528_appellationValue_string" as="xs:string" select="xs:string(.)"/>
										<dc:title>
											<xsl:sequence select="$Vvar528_appellationValue_string"/>
										</dc:title>
									</xsl:if>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="objectIdentificationWrap">
						<xsl:for-each select="titleWrap">
							<xsl:for-each select="titleSet">
								<xsl:for-each select="appellationValue">
									<xsl:variable name="Vvar543_exists" as="xs:boolean">
										<xsl:variable name="ExistsResult1" as="xs:boolean*">
											<xsl:for-each select="@pref">
												<xsl:variable name="Vvar545_pref_string" as="xs:string" select="xs:string(.)"/>
												<xsl:if test="($Vvar545_pref_string) = ('preferred')">
													<xsl:value-of select="true()"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:value-of select="fn:exists($ExistsResult1)"/>
									</xsl:variable>
									<xsl:if test="not($Vvar543_exists)">
										<xsl:variable name="Vvar549_appellationValue_string" as="xs:string" select="xs:string(.)"/>
										<dcterms:alternative>
											<xsl:sequence select="$Vvar549_appellationValue_string"/>
										</dcterms:alternative>
									</xsl:if>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:variable name="Vvar572_exists" as="xs:boolean">
									<xsl:variable name="ExistsResult2" as="xs:boolean*">
										<xsl:for-each select="eventType">
											<xsl:for-each select="term">
												<xsl:variable name="Vvar576_term_string" as="xs:string" select="xs:string(.)"/>
												<xsl:if test="($Vvar576_term_string) = ('Production')">
													<xsl:value-of select="true()"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:value-of select="fn:exists($ExistsResult2)"/>
								</xsl:variable>
								<xsl:for-each select="eventActor">
									<xsl:for-each select="actorInRole">
										<xsl:for-each select="actor">
											<xsl:for-each select="nameActorSet">
												<xsl:for-each select="appellationValue">
													<xsl:if test="$Vvar572_exists">
														<xsl:variable name="Vvar580_appellationValue_string" as="xs:string" select="xs:string(.)"/>
														<dc:creator>
															<xsl:sequence select="$Vvar580_appellationValue_string"/>
														</dc:creator>
													</xsl:if>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:for-each select="culture">
									<xsl:for-each select="term">
										<xsl:variable name="Vvar601_term_string" as="xs:string" select="xs:string(.)"/>
										<dc:subject>
											<xsl:for-each select="@xml:lang">
												<xsl:variable name="Vvar600_lang_anySimpleType" select="fn:string(.)"/>
												<xsl:attribute name="xml:lang" separator=" ">
													<xsl:sequence select="$Vvar600_lang_anySimpleType"/>
												</xsl:attribute>
											</xsl:for-each>
											<xsl:sequence select="$Vvar601_term_string"/>
										</dc:subject>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:variable name="Vvar605_descriptiveMetadata" select="."/>
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:for-each select="eventMaterialsTech">
									<xsl:for-each select="materialsTech">
										<xsl:for-each select="termMaterialsTech">
											<xsl:variable name="Vvar622_exists" as="xs:boolean">
												<xsl:variable name="ExistsResult3" as="xs:boolean*">
													<xsl:for-each select="@type">
														<xsl:variable name="Vvar624_type_string" as="xs:string" select="xs:string(.)"/>
														<xsl:if test="($Vvar624_type_string) = ('Technique')">
															<xsl:value-of select="true()"/>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:value-of select="fn:exists($ExistsResult3)"/>
											</xsl:variable>
											<xsl:for-each select="term">
												<xsl:if test="$Vvar622_exists">
													<xsl:variable name="Vvar628_exists" as="xs:boolean">
														<xsl:variable name="ExistsResult4" as="xs:boolean*">
															<xsl:for-each select="@xml:lang">
																<xsl:value-of select="true()"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:value-of select="fn:exists($ExistsResult4)"/>
													</xsl:variable>
													<xsl:variable name="Vvar632_cond" as="xs:string?">
														<xsl:choose>
															<xsl:when test="($Vvar628_exists)=true()">
																<xsl:variable name="Vvar628_exists_when" as="xs:string*">
																	<xsl:for-each select="@xml:lang">
																		<xsl:variable name="Vvar634_lang_anySimpleType" select="fn:string(.)"/>
																		<xsl:sequence select="xs:string($Vvar634_lang_anySimpleType)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="if (fn:exists($Vvar628_exists_when)) then xs:string(fn:string-join(for $i in $Vvar628_exists_when return fn:string($i),'')) else ()"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="Vvar628_exists_otherwise" as="xs:string*">
																	<xsl:for-each select="$Vvar605_descriptiveMetadata/@xml:lang">
																		<xsl:variable name="Vvar637_lang_anySimpleType" select="fn:string(.)"/>
																		<xsl:sequence select="xs:string($Vvar637_lang_anySimpleType)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="if (fn:exists($Vvar628_exists_otherwise)) then xs:string(fn:string-join(for $i in $Vvar628_exists_otherwise return fn:string($i),'')) else ()"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:variable>
													<xsl:variable name="Vvar640_term_string" as="xs:string" select="xs:string(.)"/>
													<dc:subject>
														<xsl:if test="fn:exists(fn:data($Vvar632_cond))">
															<xsl:attribute name="xml:lang" separator=" ">
																<xsl:sequence select="$Vvar632_cond"/>
															</xsl:attribute>
														</xsl:if>
														<xsl:sequence select="$Vvar640_term_string"/>
													</dc:subject>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="objectIdentificationWrap">
						<xsl:for-each select="objectDescriptionWrap">
							<xsl:for-each select="objectDescriptionSet">
								<xsl:for-each select="descriptiveNoteValue">
									<xsl:variable name="Vvar659_descriptiveNoteValue_string" as="xs:string" select="xs:string(.)"/>
									<dc:description>
										<xsl:for-each select="@xml:lang">
											<xsl:variable name="Vvar658_lang_anySimpleType" select="fn:string(.)"/>
											<xsl:attribute name="xml:lang" separator=" ">
												<xsl:sequence select="$Vvar658_lang_anySimpleType"/>
											</xsl:attribute>
										</xsl:for-each>
										<xsl:sequence select="$Vvar659_descriptiveNoteValue_string"/>
									</dc:description>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:variable name="Vvar682_exists" as="xs:boolean">
									<xsl:variable name="ExistsResult5" as="xs:boolean*">
										<xsl:for-each select="eventType">
											<xsl:for-each select="term">
												<xsl:variable name="Vvar686_term_string" as="xs:string" select="xs:string(.)"/>
												<xsl:if test="($Vvar686_term_string) = ('Production')">
													<xsl:value-of select="true()"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:value-of select="fn:exists($ExistsResult5)"/>
								</xsl:variable>
								<xsl:for-each select="eventActor">
									<xsl:for-each select="actorInRole">
										<xsl:for-each select="actor">
											<xsl:for-each select="nameActorSet">
												<xsl:for-each select="appellationValue">
													<xsl:if test="not($Vvar682_exists)">
														<xsl:variable name="Vvar690_appellationValue_string" as="xs:string" select="xs:string(.)"/>
														<dcterms:contributor>
															<xsl:sequence select="$Vvar690_appellationValue_string"/>
														</dcterms:contributor>
													</xsl:if>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:variable name="Vvar709_exists" as="xs:boolean">
									<xsl:variable name="ExistsResult6" as="xs:boolean*">
										<xsl:for-each select="eventType">
											<xsl:for-each select="term">
												<xsl:variable name="Vvar713_term_string" as="xs:string" select="xs:string(.)"/>
												<xsl:if test="($Vvar713_term_string) = ('Production')">
													<xsl:value-of select="true()"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:value-of select="fn:exists($ExistsResult6)"/>
								</xsl:variable>
								<xsl:for-each select="eventDate">
									<xsl:for-each select="date">
										<xsl:for-each select="earliestDate">
											<xsl:if test="not($Vvar709_exists)">
												<xsl:variable name="Vvar717_earliestDate_string" as="xs:string" select="xs:string(.)"/>
												<dc:date>
													<xsl:sequence select="$Vvar717_earliestDate_string"/>
												</dc:date>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:variable name="Vvar736_exists" as="xs:boolean">
									<xsl:variable name="ExistsResult7" as="xs:boolean*">
										<xsl:for-each select="eventType">
											<xsl:for-each select="term">
												<xsl:variable name="Vvar740_term_string" as="xs:string" select="xs:string(.)"/>
												<xsl:if test="($Vvar740_term_string) = ('Production')">
													<xsl:value-of select="true()"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:value-of select="fn:exists($ExistsResult7)"/>
								</xsl:variable>
								<xsl:for-each select="eventDate">
									<xsl:for-each select="date">
										<xsl:for-each select="earliestDate">
											<xsl:if test="$Vvar736_exists">
												<xsl:variable name="Vvar744_earliestDate_string" as="xs:string" select="xs:string(.)"/>
												<dcterms:created>
													<xsl:sequence select="$Vvar744_earliestDate_string"/>
												</dcterms:created>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:variable name="Vvar765_exists" as="xs:boolean">
									<xsl:variable name="ExistsResult8" as="xs:boolean*">
										<xsl:for-each select="eventType">
											<xsl:for-each select="term">
												<xsl:variable name="Vvar769_term_string" as="xs:string" select="xs:string(.)"/>
												<xsl:if test="($Vvar769_term_string) = ('Production')">
													<xsl:value-of select="true()"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:value-of select="fn:exists($ExistsResult8)"/>
								</xsl:variable>
								<xsl:for-each select="eventDate">
									<xsl:for-each select="date">
										<xsl:for-each select="periodName">
											<xsl:for-each select="term">
												<xsl:if test="$Vvar765_exists">
													<xsl:variable name="Vvar773_term_string" as="xs:string" select="xs:string(.)"/>
													<dcterms:created>
														<xsl:sequence select="$Vvar773_term_string"/>
													</dcterms:created>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:variable name="Vvar777_descriptiveMetadata" select="."/>
					<xsl:for-each select="objectClassificationWrap">
						<xsl:for-each select="objectWorkTypeWrap">
							<xsl:for-each select="objectWorkType">
								<xsl:for-each select="term">
									<xsl:variable name="Vvar788_exists" as="xs:boolean">
										<xsl:variable name="ExistsResult9" as="xs:boolean*">
											<xsl:for-each select="@xml:lang">
												<xsl:value-of select="true()"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:value-of select="fn:exists($ExistsResult9)"/>
									</xsl:variable>
									<xsl:variable name="Vvar792_cond" as="xs:string?">
										<xsl:choose>
											<xsl:when test="($Vvar788_exists)=true()">
												<xsl:variable name="Vvar788_exists_when" as="xs:string*">
													<xsl:for-each select="@xml:lang">
														<xsl:variable name="Vvar794_lang_anySimpleType" select="fn:string(.)"/>
														<xsl:sequence select="xs:string($Vvar794_lang_anySimpleType)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="if (fn:exists($Vvar788_exists_when)) then xs:string(fn:string-join(for $i in $Vvar788_exists_when return fn:string($i),'')) else ()"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="Vvar788_exists_otherwise" as="xs:string*">
													<xsl:for-each select="$Vvar777_descriptiveMetadata/@xml:lang">
														<xsl:variable name="Vvar797_lang_anySimpleType" select="fn:string(.)"/>
														<xsl:sequence select="xs:string($Vvar797_lang_anySimpleType)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="if (fn:exists($Vvar788_exists_otherwise)) then xs:string(fn:string-join(for $i in $Vvar788_exists_otherwise return fn:string($i),'')) else ()"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="Vvar800_term_string" as="xs:string" select="xs:string(.)"/>
									<dc:type>
										<xsl:if test="fn:exists(fn:data($Vvar792_cond))">
											<xsl:attribute name="xml:lang" separator=" ">
												<xsl:sequence select="$Vvar792_cond"/>
											</xsl:attribute>
										</xsl:if>
										<xsl:sequence select="$Vvar800_term_string"/>
									</dc:type>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="objectClassificationWrap">
						<xsl:for-each select="classificationWrap">
							<xsl:for-each select="classification">
								<xsl:for-each select="term">
									<xsl:variable name="Vvar815_term_string" as="xs:string" select="xs:string(.)"/>
									<dc:type>
										<xsl:sequence select="$Vvar815_term_string"/>
									</dc:type>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="objectIdentificationWrap">
						<xsl:for-each select="objectMeasurementsWrap">
							<xsl:for-each select="objectMeasurementsSet">
								<xsl:for-each select="displayObjectMeasurements">
									<xsl:variable name="Vvar834_displayObjectMeasurements_string" as="xs:string" select="xs:string(.)"/>
									<dcterms:extent>
										<xsl:for-each select="@xml:lang">
											<xsl:variable name="Vvar833_lang_anySimpleType" select="fn:string(.)"/>
											<xsl:attribute name="xml:lang" separator=" ">
												<xsl:sequence select="$Vvar833_lang_anySimpleType"/>
											</xsl:attribute>
										</xsl:for-each>
										<xsl:sequence select="$Vvar834_displayObjectMeasurements_string"/>
									</dcterms:extent>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:variable name="Vvar838_descriptiveMetadata" select="."/>
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:for-each select="eventMaterialsTech">
									<xsl:for-each select="materialsTech">
										<xsl:for-each select="termMaterialsTech">
											<xsl:variable name="Vvar855_exists" as="xs:boolean">
												<xsl:variable name="ExistsResult10" as="xs:boolean*">
													<xsl:for-each select="@type">
														<xsl:variable name="Vvar857_type_string" as="xs:string" select="xs:string(.)"/>
														<xsl:if test="($Vvar857_type_string) = ('Material')">
															<xsl:value-of select="true()"/>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:value-of select="fn:exists($ExistsResult10)"/>
											</xsl:variable>
											<xsl:for-each select="term">
												<xsl:if test="$Vvar855_exists">
													<xsl:variable name="Vvar861_exists" as="xs:boolean">
														<xsl:variable name="ExistsResult11" as="xs:boolean*">
															<xsl:for-each select="@xml:lang">
																<xsl:value-of select="true()"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:value-of select="fn:exists($ExistsResult11)"/>
													</xsl:variable>
													<xsl:variable name="Vvar865_cond" as="xs:string?">
														<xsl:choose>
															<xsl:when test="($Vvar861_exists)=true()">
																<xsl:variable name="Vvar861_exists_when" as="xs:string*">
																	<xsl:for-each select="@xml:lang">
																		<xsl:variable name="Vvar867_lang_anySimpleType" select="fn:string(.)"/>
																		<xsl:sequence select="xs:string($Vvar867_lang_anySimpleType)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="if (fn:exists($Vvar861_exists_when)) then xs:string(fn:string-join(for $i in $Vvar861_exists_when return fn:string($i),'')) else ()"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="Vvar861_exists_otherwise" as="xs:string*">
																	<xsl:for-each select="$Vvar838_descriptiveMetadata/@xml:lang">
																		<xsl:variable name="Vvar870_lang_anySimpleType" select="fn:string(.)"/>
																		<xsl:sequence select="xs:string($Vvar870_lang_anySimpleType)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="if (fn:exists($Vvar861_exists_otherwise)) then xs:string(fn:string-join(for $i in $Vvar861_exists_otherwise return fn:string($i),'')) else ()"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:variable>
													<xsl:variable name="Vvar873_term_string" as="xs:string" select="xs:string(.)"/>
													<dcterms:medium>
														<xsl:if test="fn:exists(fn:data($Vvar865_cond))">
															<xsl:attribute name="xml:lang" separator=" ">
																<xsl:sequence select="$Vvar865_cond"/>
															</xsl:attribute>
														</xsl:if>
														<xsl:sequence select="$Vvar873_term_string"/>
													</dcterms:medium>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="lidoRecID">
					<xsl:variable name="Vvar880_lidoRecID_string" as="xs:string" select="xs:string(.)"/>
					<dc:identifier>
						<xsl:sequence select="$Vvar880_lidoRecID_string"/>
					</dc:identifier>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="eventWrap">
						<xsl:for-each select="eventSet">
							<xsl:for-each select="event">
								<xsl:for-each select="eventPlace">
									<xsl:for-each select="place">
										<xsl:for-each select="namePlaceSet">
											<xsl:for-each select="appellationValue">
												<xsl:variable name="Vvar905_appellationValue_string" as="xs:string" select="xs:string(.)"/>
												<dcterms:spatial>
													<xsl:for-each select="@xml:lang">
														<xsl:variable name="Vvar904_lang_anySimpleType" select="fn:string(.)"/>
														<xsl:attribute name="xml:lang" separator=" ">
															<xsl:sequence select="$Vvar904_lang_anySimpleType"/>
														</xsl:attribute>
													</xsl:for-each>
													<xsl:sequence select="$Vvar905_appellationValue_string"/>
												</dcterms:spatial>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="administrativeMetadata">
					<xsl:for-each select="rightsWorkWrap">
						<xsl:for-each select="rightsWorkSet">
							<xsl:for-each select="rightsHolder">
								<xsl:for-each select="legalBodyName">
									<xsl:for-each select="appellationValue">
										<xsl:variable name="Vvar926_appellationValue_string" as="xs:string" select="xs:string(.)"/>
										<dc:rights>
											<xsl:for-each select="@xml:lang">
												<xsl:variable name="Vvar925_lang_anySimpleType" select="fn:string(.)"/>
												<xsl:attribute name="xml:lang" separator=" ">
													<xsl:sequence select="$Vvar925_lang_anySimpleType"/>
												</xsl:attribute>
											</xsl:for-each>
											<xsl:sequence select="$Vvar926_appellationValue_string"/>
										</dc:rights>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="descriptiveMetadata">
					<xsl:for-each select="objectIdentificationWrap">
						<xsl:for-each select="repositoryWrap">
							<xsl:for-each select="repositorySet">
								<xsl:for-each select="repositoryName">
									<xsl:for-each select="legalBodyName">
										<xsl:for-each select="appellationValue">
											<xsl:variable name="Vvar945_appellationValue_string" as="xs:string" select="xs:string(.)"/>
											<n:provider>
												<xsl:sequence select="$Vvar945_appellationValue_string"/>
											</n:provider>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<n:type>
				<xsl:sequence select="'IMAGE'"/>
			</n:type>
			<xsl:for-each select="lido">
				<xsl:for-each select="administrativeMetadata">
					<xsl:for-each select="resourceWrap">
						<xsl:for-each select="resourceSet">
							<xsl:for-each select="linkResource">
								<xsl:variable name="Vvar956_linkResource_string" as="xs:string" select="xs:string(.)"/>
								<n:isShownBy>
									<xsl:sequence select="xs:anyURI($Vvar956_linkResource_string)"/>
								</n:isShownBy>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="lido">
				<xsl:for-each select="administrativeMetadata">
					<xsl:for-each select="recordWrap">
						<xsl:for-each select="recordInfoSet">
							<xsl:for-each select="recordInfoLink">
								<xsl:variable name="Vvar969_recordInfoLink_string" as="xs:string" select="xs:string(.)"/>
								<n:isShownAt>
									<xsl:sequence select="xs:anyURI($Vvar969_recordInfoLink_string)"/>
								</n:isShownAt>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</n:record>
	</xsl:template>
</xsl:stylesheet>
